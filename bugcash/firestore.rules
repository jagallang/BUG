// BugCash 플랫폼 - 최적화된 Firestore 보안 규칙
// PRD 요구사항에 따른 최소 권한 원칙 적용

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ==============================================
    // 헬퍼 함수들
    // ==============================================

    // 인증된 사용자인지 확인
    function isAuthenticated() {
      return request.auth != null;
    }

    // 특정 사용자인지 확인
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // 관리자인지 확인 (users 컬렉션에서 role 확인)
    function isAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // 공급자인지 확인
    function isProvider() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'provider';
    }

    // 테스터인지 확인
    function isTester() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'tester';
    }

    // 특정 프로젝트의 공급자인지 확인
    function isProjectProvider(projectId) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.providerId == request.auth.uid;
    }

    // 데이터 변경시 필수 필드 검증
    function validateRequiredFields(requiredFields) {
      return requiredFields.hasAll(request.resource.data.keys());
    }

    // ==============================================
    // 사용자 관리 (users)
    // ==============================================
    match /users/{userId} {
      // 읽기: 본인 정보만 조회 가능, 관리자는 모든 사용자 조회 가능
      allow read: if isUser(userId) || isAdmin();

      // 생성: 본인 계정만 생성 가능
      allow create: if isUser(userId) &&
                    validateRequiredFields(['uid', 'email', 'displayName', 'role']) &&
                    request.resource.data.role in ['tester', 'provider'];

      // 수정: 본인 정보만 수정 가능, 관리자는 role 변경 가능
      allow update: if (isUser(userId) &&
                       !('role' in request.resource.data.diff(resource.data).affectedKeys())) ||
                      isAdmin();

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // ==============================================
    // 프로젝트 관리 (projects)
    // ==============================================
    match /projects/{projectId} {
      // 읽기: 모든 인증된 사용자 (상태가 'open'인 경우), 본인 프로젝트, 관리자
      allow read: if isAuthenticated() &&
                     (resource.data.status == 'open' ||
                      isProjectProvider(projectId) ||
                      isAdmin());

      // 생성: 인증된 사용자 (임시로 관대하게 설정)
      allow create: if isAuthenticated() &&
                    request.resource.data.providerId == request.auth.uid;

      // 수정: 본인 프로젝트만 수정 가능 (status는 관리자만)
      allow update: if (isProjectProvider(projectId) &&
                       !('status' in request.resource.data.diff(resource.data).affectedKeys())) ||
                      isAdmin();

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // ==============================================
    // 신청 관리 (applications)
    // ==============================================
    match /applications/{applicationId} {
      // 읽기: 신청자 본인, 해당 프로젝트 공급자, 관리자
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.testerId ||
                      isProjectProvider(resource.data.projectId) ||
                      isAdmin());

      // 생성: 테스터만 가능 (본인 신청만)
      allow create: if isTester() &&
                    validateRequiredFields(['projectId', 'testerId', 'status']) &&
                    request.resource.data.testerId == request.auth.uid &&
                    request.resource.data.status == 'pending';

      // 수정: 해당 프로젝트 공급자만 status 변경 가능
      allow update: if isProjectProvider(resource.data.projectId) &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'processedAt', 'processedBy', 'feedback']);

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // ==============================================
    // 활성 미션 관리 (enrollments)
    // ==============================================
    match /enrollments/{enrollmentId} {
      // 읽기: 참여 테스터, 해당 프로젝트 공급자, 관리자
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.testerId ||
                      isProjectProvider(resource.data.projectId) ||
                      isAdmin());

      // 생성: Cloud Functions만 (클라이언트에서 직접 생성 불가)
      allow create: if false;

      // 수정: Cloud Functions만 (클라이언트에서 직접 수정 불가)
      allow update: if false;

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // ==============================================
    // 일일 미션 관리 (missions)
    // ==============================================
    match /missions/{missionId} {
      // 읽기: 참여 테스터, 해당 프로젝트 공급자, 관리자
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.testerId ||
                      isProjectProvider(resource.data.projectId) ||
                      isAdmin());

      // 생성: Cloud Functions만
      allow create: if false;

      // 수정: 테스터는 제출 데이터만, 공급자는 피드백만
      allow update: if (request.auth.uid == resource.data.testerId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['submissionData', 'submittedAt', 'status'])) ||
                      (isProjectProvider(resource.data.projectId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['providerFeedback', 'approvedAt', 'status']));

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();

      // 일일 상호작용 서브컬렉션
      match /daily_interactions/{interactionId} {
        allow read, write: if request.auth.uid == get(/databases/$(database)/documents/missions/$(missionId)).data.testerId ||
                              isProjectProvider(get(/databases/$(database)/documents/missions/$(missionId)).data.projectId) ||
                              isAdmin();
      }
    }

    // ==============================================
    // 포인트 거래 내역 (points_transactions)
    // ==============================================
    match /points_transactions/{transactionId} {
      // 읽기: 본인 거래 내역만, 관리자는 모든 거래 조회 가능
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.userId || isAdmin());

      // 생성: Cloud Functions만 (포인트 거래는 서버에서만)
      allow create: if false;

      // 수정: 불가 (거래 내역은 불변)
      allow update: if false;

      // 삭제: 관리자만 가능 (감사 목적)
      allow delete: if isAdmin();
    }

    // ==============================================
    // 신고 관리 (reports)
    // ==============================================
    match /reports/{reportId} {
      // 읽기: 신고자 본인, 관리자만
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.reporterId || isAdmin());

      // 생성: 인증된 사용자 누구나 (신고 기능)
      allow create: if isAuthenticated() &&
                    validateRequiredFields(['reporterId', 'reportedId', 'type', 'category']) &&
                    request.resource.data.reporterId == request.auth.uid &&
                    request.resource.data.status == 'pending';

      // 수정: 관리자만 (신고 처리)
      allow update: if isAdmin();

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // ==============================================
    // 알림 관리 (notifications)
    // ==============================================
    match /notifications/{notificationId} {
      // 읽기: 알림 대상 사용자만
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;

      // 생성: Cloud Functions만
      allow create: if false;

      // 수정: 알림 대상 사용자가 읽음 상태만 변경 가능
      allow update: if isAuthenticated() &&
                    request.auth.uid == resource.data.userId &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);

      // 삭제: 알림 대상 사용자, 관리자
      allow delete: if isAuthenticated() &&
                    (request.auth.uid == resource.data.userId || isAdmin());
    }

    // ==============================================
    // 관리자 대시보드 (admin_dashboard)
    // ==============================================
    match /admin_dashboard/{document=**} {
      // 읽기: 관리자만
      allow read: if isAdmin();

      // 생성/수정: Cloud Functions만
      allow create, update: if false;

      // 삭제: 관리자만
      allow delete: if isAdmin();
    }

    // ==============================================
    // 프로젝트 서브컬렉션들
    // ==============================================

    // 프로젝트별 제출물
    match /projects/{projectId}/submissions/{submissionId} {
      allow read: if isAuthenticated() &&
                     (isProjectProvider(projectId) || isAdmin());
      allow create: if isTester() &&
                    request.resource.data.testerId == request.auth.uid;
      allow update: if isProjectProvider(projectId);
      allow delete: if isAdmin();
    }

    // ==============================================
    // 기본 거부 규칙
    // ==============================================

    // 명시적으로 허용되지 않은 모든 접근은 거부
    match /{document=**} {
      allow read, write: if false;
    }
  }
}