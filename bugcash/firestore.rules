// BugCash 플랫폼 - 최적화된 Firestore 보안 규칙
// PRD 요구사항에 따른 최소 권한 원칙 적용

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ==============================================
    // 헬퍼 함수들
    // ==============================================

    // 인증된 사용자인지 확인
    function isAuthenticated() {
      return request.auth != null;
    }

    // 특정 사용자인지 확인
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // 관리자인지 확인 (새 형식: isAdmin 필드 또는 기존 형식: userType)
    function isAdmin() {
      return isAuthenticated() &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin');
    }

    // 공급자인지 확인 (새 형식: roles 배열 또는 기존 형식: userType)
    function isProvider() {
      return isAuthenticated() &&
             (hasRole('provider') ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'provider');
    }

    // 테스터인지 확인 (새 형식: roles 배열 또는 기존 형식: userType)
    function isTester() {
      return isAuthenticated() &&
             (hasRole('tester') ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'tester');
    }

    // 특정 역할을 가지고 있는지 확인 (다중 역할 지원)
    function hasRole(role) {
      return isAuthenticated() &&
             role in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;
    }

    // 특정 프로젝트의 공급자인지 확인
    function isProjectProvider(projectId) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.providerId == request.auth.uid;
    }

    // 데이터 변경시 필수 필드 검증
    function validateRequiredFields(requiredFields) {
      return request.resource.data.keys().hasAll(requiredFields);
    }

    // 새 형식 사용자 데이터 검증 (다중 역할 지원)
    function validateNewUserFormat() {
      return request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'roles', 'primaryRole']) &&
             request.resource.data.roles is list &&
             request.resource.data.roles.size() > 0 &&
             request.resource.data.primaryRole in request.resource.data.roles &&
             request.resource.data.primaryRole in ['tester', 'provider', 'admin'] &&
             request.resource.data.roles.hasOnly(['tester', 'provider', 'admin']);
    }

    // 기존 형식 사용자 데이터 검증 (하위 호환성)
    function validateLegacyUserFormat() {
      return request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'userType']) &&
             request.resource.data.userType in ['tester', 'provider', 'admin'];
    }

    // 역할 관련 필드 수정 여부 확인
    function canModifyRoles() {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return 'userType' in affectedKeys ||
             'roles' in affectedKeys ||
             'primaryRole' in affectedKeys ||
             'isAdmin' in affectedKeys;
    }

    // ==============================================
    // 사용자 관리 (users)
    // ==============================================
    match /users/{userId} {
      // 읽기: 모든 사용자 허용 (인증 상태 확인용)
      allow read: if true;

      // 생성: 인증된 사용자가 본인 계정만 생성 가능 (새 형식 또는 기존 형식)
      allow create: if isAuthenticated() &&
                    request.auth.uid == userId &&
                    (validateNewUserFormat() || validateLegacyUserFormat());

      // 수정: 본인 정보만 수정 가능 (v2.80.4)
      // lastLoginAt 필드만 수정하는 경우 별도 허용 (로그인 시)
      allow update: if isUser(userId) &&
                    (// lastLoginAt만 수정
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastLoginAt']) ||
                     // primaryRole만 수정: roles 배열에 포함된 값이어야 함
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['primaryRole', 'updatedAt']) &&
                      request.resource.data.primaryRole in resource.data.roles) ||
                     // v2.80.4: roles 배열 업데이트 허용 (tester/provider만 추가 가능, admin 불가)
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roles', 'primaryRole', 'updatedAt']) &&
                      request.resource.data.keys().hasAll(resource.data.keys()) && // 기존 필드 유지
                      request.resource.data.roles.hasAll(resource.data.roles) && // 기존 역할 유지 (제거 불가)
                      request.resource.data.primaryRole in request.resource.data.roles && // primaryRole은 roles에 포함
                      !request.resource.data.roles.hasAny(['admin'])) || // admin 역할 추가 불가
                     // 다른 필드 수정 (roles 관련 필드 제외)
                     !canModifyRoles()) ||
                    isAdmin();

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();

      // 동의 정보 서브컬렉션 (consents)
      match /consents/{consentId} {
        // 읽기: 본인만 가능, 관리자는 모든 동의 정보 조회 가능
        allow read: if isUser(userId) || isAdmin();

        // 생성: 본인만 가능 (회원가입 시)
        allow create: if isUser(userId);

        // 수정: 본인만 가능 (동의 변경 시)
        allow update: if isUser(userId);

        // 삭제: 관리자만 가능
        allow delete: if isAdmin();
      }
    }

    // ==============================================
    // 프로젝트 관리 (projects)
    // ==============================================
    match /projects/{projectId} {
      // 읽기: 임시로 모든 인증된 사용자 허용 (테스트용)
      allow read: if isAuthenticated();

      // 생성: 공급자만 가능 (v2.101.2: appName 필드도 허용)
      allow create: if isProvider() &&
                    request.resource.data.providerId == request.auth.uid &&
                    request.resource.data.status == 'draft' &&
                    (request.resource.data.keys().hasAll(['title', 'description', 'providerId', 'status']) ||
                     request.resource.data.keys().hasAll(['appName', 'description', 'providerId', 'status']));

      // 수정: 상태 변경은 Cloud Functions만, 일반 필드는 공급자가 수정 가능
      allow update: if isProjectProvider(projectId) &&
                    // 상태 변경 차단 (Cloud Functions에서만 가능)
                    !('status' in request.resource.data.diff(resource.data).affectedKeys());

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // ==============================================
    // 신청 관리 (applications)
    // ==============================================
    match /applications/{applicationId} {
      // 읽기: 신청자 본인, 해당 프로젝트 공급자, 관리자
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.testerId ||
                      isProjectProvider(resource.data.projectId) ||
                      isAdmin());

      // 생성: 테스터만 가능 (본인 신청만)
      // projectId 또는 missionId 중 하나만 있어도 허용 (레거시 호환성)
      allow create: if isTester() &&
                    validateRequiredFields(['testerId', 'status']) &&
                    (request.resource.data.keys().hasAny(['projectId', 'missionId'])) &&
                    request.resource.data.testerId == request.auth.uid &&
                    request.resource.data.status == 'pending';

      // 수정: 해당 프로젝트 공급자만 status 변경 가능
      allow update: if isProjectProvider(resource.data.projectId) &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'processedAt', 'processedBy', 'feedback']);

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // ==============================================
    // 활성 미션 관리 (enrollments)
    // ==============================================
    match /enrollments/{enrollmentId} {
      // 읽기: 참여 테스터, 해당 프로젝트 공급자, 관리자
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.testerId ||
                      isProjectProvider(resource.data.projectId) ||
                      isAdmin());

      // 생성: Cloud Functions만 (클라이언트에서 직접 생성 불가)
      allow create: if false;

      // 수정: Cloud Functions만 (클라이언트에서 직접 수정 불가)
      allow update: if false;

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // ==============================================
    // 미션 관리 (missions) - 통합 규칙
    // ==============================================
    match /missions/{missionId} {
      // 읽기: 인증된 사용자 (단순화)
      allow read: if isAuthenticated();

      // 생성: 인증된 사용자 (테스터가 미션 신청 시)
      allow create: if isAuthenticated();

      // 수정: 인증된 사용자 (상태 업데이트)
      allow update: if isAuthenticated();

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();

      // 일일 상호작용 서브컬렉션
      match /daily_interactions/{interactionId} {
        allow read, write: if isAuthenticated();
      }
    }

    // ==============================================
    // 포인트 거래 내역 (points_transactions)
    // ==============================================
    match /points_transactions/{transactionId} {
      // 읽기: 본인 거래 내역만, 관리자는 모든 거래 조회 가능
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.userId || isAdmin());

      // 생성: Cloud Functions만 (포인트 거래는 서버에서만)
      allow create: if false;

      // 수정: 불가 (거래 내역은 불변)
      allow update: if false;

      // 삭제: 관리자만 가능 (감사 목적)
      allow delete: if isAdmin();
    }

    // ==============================================
    // 신고 관리 (reports)
    // ==============================================
    match /reports/{reportId} {
      // 읽기: 신고자 본인, 관리자만
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.reporterId || isAdmin());

      // 생성: 인증된 사용자 누구나 (신고 기능)
      allow create: if isAuthenticated() &&
                    validateRequiredFields(['reporterId', 'reportedId', 'type', 'category']) &&
                    request.resource.data.reporterId == request.auth.uid &&
                    request.resource.data.status == 'pending';

      // 수정: 관리자만 (신고 처리)
      allow update: if isAdmin();

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // ==============================================
    // 알림 관리 (notifications)
    // ==============================================
    match /notifications/{notificationId} {
      // 읽기: 알림 대상 사용자만
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;

      // 생성: Cloud Functions만
      allow create: if false;

      // 수정: 알림 대상 사용자가 읽음 상태만 변경 가능
      allow update: if isAuthenticated() &&
                    request.auth.uid == resource.data.userId &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);

      // 삭제: 알림 대상 사용자, 관리자
      allow delete: if isAuthenticated() &&
                    (request.auth.uid == resource.data.userId || isAdmin());
    }

    // ==============================================
    // 관리자 대시보드 (admin_dashboard)
    // ==============================================
    match /admin_dashboard/{document=**} {
      // 읽기: 관리자만
      allow read: if isAdmin();

      // 생성/수정: Cloud Functions만
      allow create, update: if false;

      // 삭제: 관리자만
      allow delete: if isAdmin();
    }

    // ==============================================
    // 프로젝트 서브컬렉션들
    // ==============================================

    // 프로젝트별 제출물
    match /projects/{projectId}/submissions/{submissionId} {
      allow read: if isAuthenticated() &&
                     (isProjectProvider(projectId) || isAdmin());
      allow create: if isTester() &&
                    request.resource.data.testerId == request.auth.uid;
      allow update: if isProjectProvider(projectId);
      allow delete: if isAdmin();
    }

    // ==============================================
    // 추가 컬렉션 규칙
    // ==============================================

    // missionApplications 컬렉션
    match /missionApplications/{applicationId} {
      allow read, write: if isAuthenticated();
    }

    // earnings 컬렉션 (수익 데이터) - v2.105.1: 권한 세분화
    match /earnings/{earningId} {
      // 읽기: 본인 수익 데이터만, 관리자는 모든 수익 조회 가능
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.userId || isAdmin());

      // 생성: 관리자만 (수익 데이터는 서버에서 생성)
      allow create: if isAdmin();

      // 수정: 관리자만 (수익 데이터 수정은 서버에서만)
      allow update: if isAdmin();

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // activities 컬렉션
    match /activities/{activityId} {
      allow read, write: if isAuthenticated();
    }

    // apps 컬렉션 (공급자 앱 등록)
    match /apps/{appId} {
      allow read, write: if isAuthenticated();
    }

    // tester_applications 컬렉션 (테스터 신청)
    match /tester_applications/{applicationId} {
      allow read, write: if isAuthenticated();
    }

    // mission_participants 컬렉션 (미션 참여자)
    match /mission_participants/{participantId} {
      allow read, write: if isAuthenticated();
    }

    // points_transactions 컬렉션 (포인트 거래)
    match /points_transactions/{transactionId} {
      allow read, write: if isAuthenticated();
    }

    // mission_assignments 컬렉션 (미션 할당)
    match /mission_assignments/{assignmentId} {
      allow read, write: if isAuthenticated();
    }

    // test_missions 컬렉션 (테스트 미션)
    match /test_missions/{missionId} {
      allow read, write: if isAuthenticated();
    }

    // ==============================================
    // 미션 워크플로 관리 (mission_workflows) - v2.104.1: 세분화된 권한 체크
    // ==============================================
    match /mission_workflows/{workflowId} {
      // 읽기: 본인(테스터), 공급자, 관리자만
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.testerId ||
                      request.auth.uid == resource.data.providerId ||
                      isAdmin());

      // 생성: 테스터 본인만 신청 가능 (testerId가 본인 uid와 일치)
      allow create: if isAuthenticated() &&
                    request.resource.data.testerId == request.auth.uid;

      // 수정: 공급자 또는 관리자만 (승인/거부 처리)
      allow update: if isAuthenticated() &&
                    (request.auth.uid == resource.data.providerId ||
                     isAdmin());

      // 삭제: 관리자만
      allow delete: if isAdmin();
    }

    // ==============================================
    // 지갑 관리 (wallets) - 보안 강화
    // ==============================================
    match /wallets/{walletId} {
      // 읽기: 본인 지갑만, 관리자는 모든 지갑 조회 가능
      allow read: if isAuthenticated() &&
                     (request.auth.uid == walletId || isAdmin());

      // 생성: 본인 지갑만 생성 가능, 초기 잔액은 0이어야 함
      allow create: if isAuthenticated() &&
                    request.auth.uid == walletId &&
                    request.resource.data.userId == request.auth.uid &&
                    request.resource.data.balance == 0 &&
                    request.resource.data.totalCharged == 0 &&
                    request.resource.data.totalEarned == 0 &&
                    request.resource.data.totalSpent == 0 &&
                    request.resource.data.totalWithdrawn == 0;

      // 수정: 본인 지갑만, 관리자 (v2.101.2: 임시로 클라이언트 수정 허용)
      // TODO: 추후 Cloud Functions로 이전 필요
      allow update: if isAuthenticated() &&
                    (request.auth.uid == walletId || isAdmin());

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // ==============================================
    // 거래 내역 관리 (transactions) - 보안 강화
    // ==============================================
    match /transactions/{transactionId} {
      // 읽기: 본인 거래 내역만, 관리자는 모든 거래 조회 가능
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.userId || isAdmin());

      // 생성: 본인 거래만, 관리자 (v2.101.2: 임시로 클라이언트 생성 허용)
      // TODO: 추후 Cloud Functions로 이전 필요
      allow create: if isAuthenticated() &&
                    (request.resource.data.userId == request.auth.uid || isAdmin());

      // 수정: 본인 거래만, 관리자 (v2.101.2: 임시로 클라이언트 수정 허용)
      // TODO: 추후 Cloud Functions로 이전 필요
      allow update: if isAuthenticated() &&
                    (request.auth.uid == resource.data.userId || isAdmin());

      // 삭제: 관리자만 가능 (감사 목적으로 거래 내역은 삭제 금지 원칙)
      allow delete: if isAdmin();
    }

    // ==============================================
    // 보안 알림 (alerts) - 관리자 전용
    // ==============================================
    match /alerts/{alertId} {
      // 읽기: 관리자만
      allow read: if isAdmin();

      // 생성: Cloud Functions만 (자동 생성)
      allow create: if false;

      // 수정: 관리자만 (처리 상태 변경)
      allow update: if isAdmin();

      // 삭제: 관리자만
      allow delete: if isAdmin();
    }

    // ==============================================
    // 플랫폼 설정 (platform_settings) - 관리자 전용
    // ==============================================
    match /platform_settings/{settingType} {
      // 읽기: 인증된 사용자 누구나 (설정값 조회)
      allow read: if isAuthenticated();

      // 생성: Cloud Functions만 (초기 설정 생성)
      allow create: if false;

      // 수정: Cloud Functions만 (관리자가 updatePlatformSettings 함수 사용)
      allow update: if false;

      // 삭제: 관리자만 가능 (설정 초기화 목적)
      allow delete: if isAdmin();
    }

    // ==============================================
    // 설정 변경 이력 (settings_history) - 감사 로그
    // ==============================================
    match /settings_history/{historyId} {
      // 읽기: 관리자만 (변경 이력 조회)
      allow read: if isAdmin();

      // 생성: Cloud Functions만 (자동 기록)
      allow create: if false;

      // 수정: 불가 (이력은 불변)
      allow update: if false;

      // 삭제: 관리자만 가능 (감사 목적)
      allow delete: if isAdmin();
    }

    // ==============================================
    // 정산 관리 (settlements) - 테스터 정산 데이터
    // ==============================================
    match /settlements/{settlementId} {
      // 읽기: 본인 정산 내역만, 관리자는 모든 정산 조회 가능
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.testerId || isAdmin());

      // 생성: Cloud Functions만 가능 (정산 데이터는 서버에서 생성)
      allow create: if false;

      // 수정: Cloud Functions만 가능 (정산 처리는 서버에서만)
      allow update: if false;

      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // ==============================================
    // v2.102.0: 에스크로 홀딩 관리 (escrow_holdings)
    // ==============================================
    match /escrow_holdings/{holdingId} {
      // 읽기: 공급자 본인, 관리자
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.providerId || isAdmin());

      // 생성/수정/삭제: Cloud Functions만 가능 (에스크로는 서버에서만 관리)
      allow create, update, delete: if false;
    }

    // ==============================================
    // 관리자 슈퍼유저 규칙 - 모든 컬렉션 접근 허용
    // ==============================================
    // 위에 명시적으로 정의되지 않은 모든 컬렉션에 대해 관리자 접근 허용
    // 이 규칙은 우선순위가 가장 낮으므로 명시적 규칙이 먼저 적용됨
    match /{document=**} {
      // 관리자는 모든 컬렉션(정의된/미정의 모두) 읽기/쓰기 가능
      // 예: payments, test_data, logs 등 미정의 컬렉션 포함
      allow read, write: if isAdmin();
    }

  }
}