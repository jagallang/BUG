// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'core/services/api_key_service.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static Future<FirebaseOptions> get currentPlatformWithApiKey async {
    final apiKey = await ApiKeyService.getFirebaseApiKey();

    if (kIsWeb) {
      return await webWithApiKey(apiKey);
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return await androidWithApiKey(apiKey);
      case TargetPlatform.iOS:
        return iosWithApiKey(apiKey);
      case TargetPlatform.macOS:
        return macosWithApiKey(apiKey);
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'your_web_api_key_here',
    appId: '1:335851774651:web:f7efbf71fdfd36690abf9e',
    messagingSenderId: '335851774651',
    projectId: 'bugcash',
    authDomain: 'bugcash.firebaseapp.com',
    storageBucket: 'bugcash.firebasestorage.app',
    measurementId: 'G-XXXXXXXXXX',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'your_android_api_key_here',
    appId: '1:335851774651:android:9c485dd2a5f436ef0abf9e',
    messagingSenderId: '335851774651',
    projectId: 'bugcash',
    storageBucket: 'bugcash.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyC3EY_your_ios_api_key_here',
    appId: '1:335851774651:ios:abcdef123456789',
    messagingSenderId: '335851774651',
    projectId: 'bugcash',
    storageBucket: 'bugcash.appspot.com',
    iosClientId: 'YOUR_IOS_CLIENT_ID.apps.googleusercontent.com',
    iosBundleId: 'com.bugcash.app',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyC4EY_your_macos_api_key_here',
    appId: '1:335851774651:macos:abcdef123456789',
    messagingSenderId: '335851774651',
    projectId: 'bugcash',
    storageBucket: 'bugcash.appspot.com',
    iosClientId: 'YOUR_MACOS_CLIENT_ID.apps.googleusercontent.com',
    iosBundleId: 'com.bugcash.app',
  );

  static Future<FirebaseOptions> webWithApiKey(String apiKey) async {
    final measurementId = await ApiKeyService.getMeasurementId();
    final projectId = await ApiKeyService.getProjectId();
    final messagingSenderId = await ApiKeyService.getMessagingSenderId();

    return FirebaseOptions(
      apiKey: apiKey,
      appId: '1:335851774651:web:f7efbf71fdfd36690abf9e',
      messagingSenderId: messagingSenderId,
      projectId: projectId,
      authDomain: '$projectId.firebaseapp.com',
      storageBucket: '$projectId.firebasestorage.app',
      measurementId: measurementId,
    );
  }

  static Future<FirebaseOptions> androidWithApiKey(String apiKey) async {
    final projectId = await ApiKeyService.getProjectId();
    final messagingSenderId = await ApiKeyService.getMessagingSenderId();

    return FirebaseOptions(
      apiKey: apiKey,
      appId: '1:335851774651:android:9c485dd2a5f436ef0abf9e',
      messagingSenderId: messagingSenderId,
      projectId: projectId,
      storageBucket: '$projectId.firebasestorage.app',
    );
  }

  static FirebaseOptions iosWithApiKey(String apiKey) {
    return FirebaseOptions(
      apiKey: apiKey,
      appId: '1:335851774651:ios:abcdef123456789',
      messagingSenderId: '335851774651',
      projectId: 'bugcash',
      storageBucket: 'bugcash.appspot.com',
      iosClientId: 'YOUR_IOS_CLIENT_ID.apps.googleusercontent.com',
      iosBundleId: 'com.bugcash.app',
    );
  }

  static FirebaseOptions macosWithApiKey(String apiKey) {
    return FirebaseOptions(
      apiKey: apiKey,
      appId: '1:335851774651:macos:abcdef123456789',
      messagingSenderId: '335851774651',
      projectId: 'bugcash',
      storageBucket: 'bugcash.appspot.com',
      iosClientId: 'YOUR_MACOS_CLIENT_ID.apps.googleusercontent.com',
      iosBundleId: 'com.bugcash.app',
    );
  }
}