import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../domain/repositories/provider_dashboard_repository.dart';
import '../providers/provider_dashboard_provider.dart';
import '../../../../models/mission_model.dart';

// Mission creation state
class MissionCreationState {
  final bool isLoading;
  final String? error;
  final MissionCreationStep currentStep;
  final double validationProgress;

  const MissionCreationState({
    this.isLoading = false,
    this.error,
    this.currentStep = MissionCreationStep.basicSettings,
    this.validationProgress = 0.0,
  });

  MissionCreationState copyWith({
    bool? isLoading,
    String? error,
    MissionCreationStep? currentStep,
    double? validationProgress,
  }) {
    return MissionCreationState(
      isLoading: isLoading ?? this.isLoading,
      error: error,
      currentStep: currentStep ?? this.currentStep,
      validationProgress: validationProgress ?? this.validationProgress,
    );
  }
}

enum MissionCreationStep {
  basicSettings,
  detailedInfo,
  participation,
  review,
  created,
}

// Mission creation notifier
class MissionCreationNotifier extends StateNotifier<MissionCreationState> {
  final ProviderDashboardRepository _repository;

  MissionCreationNotifier(this._repository) : super(const MissionCreationState());

  // Create new mission
  Future<void> createMission(Map<String, dynamic> missionData) async {
    state = state.copyWith(isLoading: true, error: null);

    try {
      // Step 1: Validate mission data
      final validationResult = _validateMissionData(missionData);
      if (!validationResult.isValid) {
        throw Exception('미션 데이터 검증 실패: ${validationResult.errors.join(', ')}');
      }

      // Step 2: Create mission model
      final mission = _createMissionModel(missionData);

      // Step 3: Save to repository
      await _repository.createMission(mission);

      state = state.copyWith(
        isLoading: false,
        currentStep: MissionCreationStep.created,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
      rethrow;
    }
  }

  // Create mission model from form data
  MissionModel _createMissionModel(Map<String, dynamic> data) {
    return MissionModel(
      id: '', // Will be generated by Firestore
      title: data['title'],
      appName: data['appName'] ?? '',
      category: _getMissionTypeString(data['type']),
      status: 'active', // Start as active
      testers: 0, // No testers initially
      maxTesters: data['maxParticipants'],
      reward: data['rewardPoints'],
      description: data['description'],
      requirements: data['requiredSkills'] ?? [],
      duration: _calculateDurationInDays(data['deadline']),
      createdAt: DateTime.now(),
      createdBy: data['providerId'],
      bugs: 0, // No bugs found initially
      isHot: data['priority'] == MissionPriority.urgent || data['priority'] == MissionPriority.high,
      isNew: true,
    );
  }

  // Validate mission data
  MissionValidationResult _validateMissionData(Map<String, dynamic> data) {
    final List<String> errors = [];
    final List<String> warnings = [];

    // Required fields validation
    if (data['title'] == null || data['title'].toString().trim().isEmpty) {
      errors.add('미션 제목은 필수입니다');
    } else if (data['title'].toString().length < 10) {
      errors.add('미션 제목은 최소 10글자 이상이어야 합니다');
    }

    if (data['description'] == null || data['description'].toString().trim().isEmpty) {
      errors.add('미션 설명은 필수입니다');
    } else if (data['description'].toString().length < 20) {
      errors.add('미션 설명은 최소 20글자 이상이어야 합니다');
    }

    if (data['details'] == null || data['details'].toString().trim().isEmpty) {
      errors.add('상세 설명은 필수입니다');
    } else if (data['details'].toString().length < 100) {
      errors.add('상세 설명은 최소 100글자 이상이어야 합니다');
    }

    if (data['instructions'] == null || data['instructions'].toString().trim().isEmpty) {
      errors.add('수행 방법은 필수입니다');
    }

    if (data['completionCriteria'] == null || data['completionCriteria'].toString().trim().isEmpty) {
      errors.add('완료 기준은 필수입니다');
    }

    if (data['appId'] == null || data['appId'].toString().trim().isEmpty) {
      errors.add('대상 앱을 선택해주세요');
    }

    if (data['providerId'] == null || data['providerId'].toString().trim().isEmpty) {
      errors.add('공급자 정보가 없습니다');
    }

    // Numeric validation
    final maxParticipants = data['maxParticipants'] as int? ?? 0;
    if (maxParticipants < 1) {
      errors.add('최대 참여자 수는 1명 이상이어야 합니다');
    } else if (maxParticipants > 100) {
      warnings.add('최대 참여자 수가 100명을 초과합니다. 관리에 어려움이 있을 수 있습니다');
    }

    final estimatedMinutes = data['estimatedMinutes'] as int? ?? 0;
    if (estimatedMinutes < 5) {
      errors.add('예상 소요시간은 최소 5분 이상이어야 합니다');
    } else if (estimatedMinutes > 240) {
      warnings.add('예상 소요시간이 4시간을 초과합니다. 참여율이 낮을 수 있습니다');
    }

    final rewardPoints = data['rewardPoints'] as int? ?? 0;
    if (rewardPoints < 10) {
      errors.add('보상 포인트는 최소 10점 이상이어야 합니다');
    } else if (rewardPoints > 1000) {
      warnings.add('보상 포인트가 1000점을 초과합니다. 예산을 확인해주세요');
    }

    // Deadline validation
    final deadline = data['deadline'] as DateTime?;
    if (deadline != null) {
      final now = DateTime.now();
      final difference = deadline.difference(now).inHours;
      
      if (difference < 24) {
        warnings.add('마감일까지 24시간 미만입니다. 참여자 모집이 어려울 수 있습니다');
      } else if (difference > 30 * 24) {
        warnings.add('마감일이 30일 이후입니다. 참여자들이 미션을 잊을 수 있습니다');
      }
    }

    // Skills and tags validation
    final requiredSkills = data['requiredSkills'] as List<String>? ?? [];
    if (requiredSkills.length > 10) {
      warnings.add('필요 스킬이 10개를 초과합니다. 참여자 모집이 어려울 수 있습니다');
    }

    final tags = data['tags'] as List<String>? ?? [];
    if (tags.isEmpty) {
      warnings.add('태그를 추가하면 미션 검색이 용이합니다');
    } else if (tags.length > 5) {
      warnings.add('태그는 5개 이하로 제한하는 것이 좋습니다');
    }

    return MissionValidationResult(
      isValid: errors.isEmpty,
      errors: errors,
      warnings: warnings,
    );
  }

  // Helper methods
  String _getMissionTypeString(MissionType type) {
    switch (type) {
      case MissionType.bugReport:
        return '버그 리포트';
      case MissionType.featureTesting:
        return '기능 테스트';
      case MissionType.usabilityTest:
        return '사용성 테스트';
      case MissionType.performance:
      case MissionType.performanceTest:
        return '성능 테스트';
      case MissionType.survey:
        return '설문조사';
      case MissionType.feedback:
        return '피드백 수집';
      case MissionType.functional:
        return '기능 테스트';
      case MissionType.uiUx:
        return 'UI/UX 테스트';
      case MissionType.security:
        return '보안 테스트';
      case MissionType.compatibility:
        return '호환성 테스트';
      case MissionType.accessibility:
        return '접근성 테스트';
      case MissionType.localization:
        return '지역화 테스트';
    }
  }

  int _calculateDurationInDays(DateTime? deadline) {
    if (deadline == null) {
      return 7; // Default to 7 days
    }
    
    final now = DateTime.now();
    final difference = deadline.difference(now).inDays;
    return difference > 0 ? difference : 1; // At least 1 day
  }

  // Update creation step
  void updateStep(MissionCreationStep step) {
    state = state.copyWith(currentStep: step);
  }

  // Clear error
  void clearError() {
    state = state.copyWith(error: null);
  }

  // Reset state
  void reset() {
    state = const MissionCreationState();
  }

  // Update validation progress
  void updateValidationProgress(double progress) {
    state = state.copyWith(validationProgress: progress);
  }
}

// Mission validation result
class MissionValidationResult {
  final bool isValid;
  final List<String> errors;
  final List<String> warnings;

  const MissionValidationResult({
    required this.isValid,
    required this.errors,
    required this.warnings,
  });
}

// Providers
final missionCreationProvider = StateNotifierProvider<MissionCreationNotifier, MissionCreationState>((ref) {
  final repository = ref.watch(providerDashboardRepositoryProvider);
  return MissionCreationNotifier(repository);
});

// Mission validation provider
final missionValidationProvider = Provider.family<MissionValidationResult, Map<String, dynamic>>((ref, missionData) {
  final notifier = ref.read(missionCreationProvider.notifier);
  return notifier._validateMissionData(missionData);
});

// Mission types provider for dropdowns
final missionTypesProvider = Provider<List<MissionType>>((ref) {
  return MissionType.values;
});

// Mission priorities provider for dropdowns
final missionPrioritiesProvider = Provider<List<MissionPriority>>((ref) {
  return MissionPriority.values;
});

// Mission complexities provider for dropdowns
final missionComplexitiesProvider = Provider<List<MissionComplexity>>((ref) {
  return MissionComplexity.values;
});

// Mission template provider
final missionTemplateProvider = Provider.family<MissionTemplate, MissionType>((ref, type) {
  return _getMissionTemplate(type);
});

// Mission template model
class MissionTemplate {
  final String titleSuggestion;
  final String descriptionTemplate;
  final String instructionsTemplate;
  final String completionCriteriaTemplate;
  final List<String> suggestedSkills;
  final List<String> suggestedTags;
  final int suggestedDuration;
  final int suggestedReward;
  final MissionComplexity suggestedComplexity;

  const MissionTemplate({
    required this.titleSuggestion,
    required this.descriptionTemplate,
    required this.instructionsTemplate,
    required this.completionCriteriaTemplate,
    required this.suggestedSkills,
    required this.suggestedTags,
    required this.suggestedDuration,
    required this.suggestedReward,
    required this.suggestedComplexity,
  });
}

// Mission template factory
MissionTemplate _getMissionTemplate(MissionType type) {
  switch (type) {
    case MissionType.bugReport:
      return const MissionTemplate(
        titleSuggestion: '[앱명] 버그 발견 및 보고',
        descriptionTemplate: '앱 사용 중 발생하는 버그를 찾아 상세하게 보고해주세요.',
        instructionsTemplate: '1. 앱을 다양한 시나리오로 사용해보세요\n2. 발생한 버그를 스크린샷과 함께 기록하세요\n3. 재현 가능한 단계를 자세히 작성하세요',
        completionCriteriaTemplate: '• 최소 1개 이상의 유효한 버그 발견\n• 스크린샷 또는 동영상 첨부\n• 재현 단계 상세 기술',
        suggestedSkills: ['앱 테스트', '버그 분석', '문서작성'],
        suggestedTags: ['버그', '테스트', '품질관리'],
        suggestedDuration: 60,
        suggestedReward: 200,
        suggestedComplexity: MissionComplexity.medium,
      );
    case MissionType.featureTesting:
      return const MissionTemplate(
        titleSuggestion: '[앱명] 새로운 기능 테스트',
        descriptionTemplate: '새로 추가된 기능들을 테스트하고 피드백을 제공해주세요.',
        instructionsTemplate: '1. 새로운 기능들을 하나씩 사용해보세요\n2. 각 기능의 동작을 확인하세요\n3. 개선점이나 문제점을 기록하세요',
        completionCriteriaTemplate: '• 모든 지정된 기능 테스트 완료\n• 각 기능에 대한 상세 피드백\n• 사용성 평가 점수 제출',
        suggestedSkills: ['기능 테스트', 'UX 평가', '피드백 작성'],
        suggestedTags: ['기능테스트', '새기능', '피드백'],
        suggestedDuration: 45,
        suggestedReward: 150,
        suggestedComplexity: MissionComplexity.easy,
      );
    case MissionType.usabilityTest:
      return const MissionTemplate(
        titleSuggestion: '[앱명] 사용성 테스트',
        descriptionTemplate: '앱의 사용성을 평가하고 사용자 경험을 개선할 수 있는 의견을 제시해주세요.',
        instructionsTemplate: '1. 일반적인 사용 시나리오를 따라 앱을 사용하세요\n2. 불편한 점이나 개선점을 기록하세요\n3. 사용성 설문지를 작성하세요',
        completionCriteriaTemplate: '• 사용성 테스트 시나리오 완료\n• 개선점 3가지 이상 제시\n• 사용성 설문지 완성',
        suggestedSkills: ['UX 평가', '사용성 분석', '설문 응답'],
        suggestedTags: ['사용성', 'UX', '개선'],
        suggestedDuration: 90,
        suggestedReward: 300,
        suggestedComplexity: MissionComplexity.hard,
      );
    case MissionType.performance:
    case MissionType.performanceTest:
      return const MissionTemplate(
        titleSuggestion: '[앱명] 성능 테스트',
        descriptionTemplate: '앱의 성능을 측정하고 최적화가 필요한 부분을 찾아주세요.',
        instructionsTemplate: '1. 다양한 환경에서 앱을 실행하세요\n2. 로딩 시간과 반응성을 측정하세요\n3. 메모리 사용량을 모니터링하세요',
        completionCriteriaTemplate: '• 성능 측정 데이터 제출\n• 성능 이슈 상세 보고\n• 최적화 제안사항',
        suggestedSkills: ['성능 측정', '앱 최적화', '데이터 분석'],
        suggestedTags: ['성능', '최적화', '속도'],
        suggestedDuration: 120,
        suggestedReward: 400,
        suggestedComplexity: MissionComplexity.expert,
      );
    case MissionType.survey:
      return const MissionTemplate(
        titleSuggestion: '[앱명] 사용자 만족도 조사',
        descriptionTemplate: '앱 사용 후 만족도와 개선사항에 대한 설문조사에 참여해주세요.',
        instructionsTemplate: '1. 앱을 충분히 사용해보세요\n2. 설문조사에 성실히 응답하세요\n3. 자유 의견을 상세히 작성하세요',
        completionCriteriaTemplate: '• 모든 설문 항목 응답 완료\n• 자유 의견 3개 이상 작성\n• 평점 및 추천도 제출',
        suggestedSkills: ['설문 응답', '의견 제시', '평가'],
        suggestedTags: ['설문', '만족도', '의견'],
        suggestedDuration: 30,
        suggestedReward: 100,
        suggestedComplexity: MissionComplexity.easy,
      );
    case MissionType.feedback:
      return const MissionTemplate(
        titleSuggestion: '[앱명] 종합 피드백 수집',
        descriptionTemplate: '앱 전반에 대한 종합적인 피드백과 개선 아이디어를 제공해주세요.',
        instructionsTemplate: '1. 앱의 모든 기능을 체험해보세요\n2. 좋은 점과 개선점을 정리하세요\n3. 창의적인 아이디어를 제안하세요',
        completionCriteriaTemplate: '• 종합 피드백 리포트 작성\n• 개선 아이디어 5개 이상\n• 우선순위별 정리',
        suggestedSkills: ['종합 평가', '아이디어 제안', '분석'],
        suggestedTags: ['피드백', '아이디어', '종합평가'],
        suggestedDuration: 75,
        suggestedReward: 250,
        suggestedComplexity: MissionComplexity.medium,
      );
    case MissionType.functional:
      return const MissionTemplate(
        titleSuggestion: '[앱명] 기능 테스트',
        descriptionTemplate: '앱의 주요 기능들이 정상적으로 작동하는지 테스트해주세요.',
        instructionsTemplate: '1. 모든 주요 기능을 테스트하세요\n2. 예상대로 작동하는지 확인하세요\n3. 문제점을 자세히 기록하세요',
        completionCriteriaTemplate: '• 모든 기능 테스트 완료\n• 테스트 결과 상세 보고\n• 문제점 및 개선사항 제시',
        suggestedSkills: ['기능 테스트', '품질 검증', '문서작성'],
        suggestedTags: ['기능', '테스트', '검증'],
        suggestedDuration: 90,
        suggestedReward: 300,
        suggestedComplexity: MissionComplexity.medium,
      );
    case MissionType.uiUx:
      return const MissionTemplate(
        titleSuggestion: '[앱명] UI/UX 평가',
        descriptionTemplate: '앱의 사용자 인터페이스와 경험을 평가해주세요.',
        instructionsTemplate: '1. 디자인과 레이아웃을 평가하세요\n2. 사용자 경험을 분석하세요\n3. 개선점을 제안하세요',
        completionCriteriaTemplate: '• UI/UX 평가 보고서\n• 스크린샷과 주석\n• 개선 제안 5개 이상',
        suggestedSkills: ['UI/UX 평가', '디자인 감각', '사용성 분석'],
        suggestedTags: ['UI', 'UX', '디자인'],
        suggestedDuration: 60,
        suggestedReward: 250,
        suggestedComplexity: MissionComplexity.medium,
      );
    case MissionType.security:
      return const MissionTemplate(
        titleSuggestion: '[앱명] 보안 테스트',
        descriptionTemplate: '앱의 보안 취약점을 찾아 보고해주세요.',
        instructionsTemplate: '1. 일반적인 보안 취약점 테스트\n2. 데이터 보호 확인\n3. 권한 관리 검증',
        completionCriteriaTemplate: '• 보안 테스트 체크리스트 완료\n• 발견된 취약점 상세 보고\n• 보안 개선 제안',
        suggestedSkills: ['보안 테스트', '취약점 분석', '보안 지식'],
        suggestedTags: ['보안', '취약점', '테스트'],
        suggestedDuration: 120,
        suggestedReward: 500,
        suggestedComplexity: MissionComplexity.expert,
      );
    case MissionType.compatibility:
      return const MissionTemplate(
        titleSuggestion: '[앱명] 호환성 테스트',
        descriptionTemplate: '다양한 기기와 OS 버전에서 앱의 호환성을 테스트해주세요.',
        instructionsTemplate: '1. 다양한 기기에서 테스트\n2. OS 버전별 호환성 확인\n3. 호환성 이슈 기록',
        completionCriteriaTemplate: '• 최소 2개 이상 기기/OS 테스트\n• 호환성 이슈 리포트\n• 해결 방안 제시',
        suggestedSkills: ['호환성 테스트', '다양한 기기 경험', '문제 해결'],
        suggestedTags: ['호환성', '기기', 'OS'],
        suggestedDuration: 90,
        suggestedReward: 350,
        suggestedComplexity: MissionComplexity.hard,
      );
    case MissionType.accessibility:
      return const MissionTemplate(
        titleSuggestion: '[앱명] 접근성 평가',
        descriptionTemplate: '장애인 및 고령자를 위한 앱의 접근성을 평가해주세요.',
        instructionsTemplate: '1. 접근성 기능 테스트\n2. 스크린 리더 호환성 확인\n3. 접근성 개선점 제안',
        completionCriteriaTemplate: '• 접근성 체크리스트 완료\n• 접근성 이슈 보고\n• 개선 방안 제시',
        suggestedSkills: ['접근성 평가', '사용성 테스트', '포용적 디자인'],
        suggestedTags: ['접근성', '사용성', '포용성'],
        suggestedDuration: 60,
        suggestedReward: 300,
        suggestedComplexity: MissionComplexity.medium,
      );
    case MissionType.localization:
      return const MissionTemplate(
        titleSuggestion: '[앱명] 지역화 테스트',
        descriptionTemplate: '앱의 다국어 지원과 지역화를 테스트해주세요.',
        instructionsTemplate: '1. 언어 변경 테스트\n2. 지역별 형식 확인\n3. 번역 품질 평가',
        completionCriteriaTemplate: '• 지역화 테스트 완료\n• 번역 오류 보고\n• 개선 제안',
        suggestedSkills: ['다국어 능력', '지역화 테스트', '문화적 이해'],
        suggestedTags: ['지역화', '번역', '다국어'],
        suggestedDuration: 45,
        suggestedReward: 200,
        suggestedComplexity: MissionComplexity.medium,
      );
  }
}

// Mission difficulty calculator
final missionDifficultyProvider = Provider.family<MissionDifficultyAnalysis, Map<String, dynamic>>((ref, missionData) {
  return _calculateMissionDifficulty(missionData);
});

class MissionDifficultyAnalysis {
  final MissionComplexity complexity;
  final int skillRequirements;
  final int timeCommitment;
  final double difficultyScore;
  final String recommendation;

  const MissionDifficultyAnalysis({
    required this.complexity,
    required this.skillRequirements,
    required this.timeCommitment,
    required this.difficultyScore,
    required this.recommendation,
  });
}

MissionDifficultyAnalysis _calculateMissionDifficulty(Map<String, dynamic> data) {
  final complexity = data['complexity'] as MissionComplexity? ?? MissionComplexity.medium;
  final requiredSkills = data['requiredSkills'] as List<String>? ?? [];
  final estimatedMinutes = data['estimatedMinutes'] as int? ?? 30;
  
  double score = 1.0;
  
  // Complexity factor
  switch (complexity) {
    case MissionComplexity.easy:
      score *= 1.0;
      break;
    case MissionComplexity.medium:
      score *= 1.5;
      break;
    case MissionComplexity.hard:
      score *= 2.0;
      break;
    case MissionComplexity.expert:
      score *= 3.0;
      break;
  }
  
  // Skills factor
  score += requiredSkills.length * 0.2;
  
  // Time factor
  if (estimatedMinutes > 60) {
    score += (estimatedMinutes - 60) / 60 * 0.5;
  }
  
  String recommendation;
  if (score < 1.5) {
    recommendation = '초보자도 쉽게 참여할 수 있는 미션입니다';
  } else if (score < 2.5) {
    recommendation = '적당한 경험이 있는 테스터에게 적합합니다';
  } else if (score < 3.5) {
    recommendation = '경험 많은 테스터에게 권장되는 미션입니다';
  } else {
    recommendation = '전문가 수준의 테스터만 참여 가능한 고난도 미션입니다';
  }
  
  return MissionDifficultyAnalysis(
    complexity: complexity,
    skillRequirements: requiredSkills.length,
    timeCommitment: estimatedMinutes,
    difficultyScore: score,
    recommendation: recommendation,
  );
}