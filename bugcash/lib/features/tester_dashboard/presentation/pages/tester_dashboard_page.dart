import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import '../widgets/earnings_summary_widget.dart';
import '../widgets/community_board_widget.dart';
import '../widgets/expandable_mission_card.dart';
import '../widgets/active_test_session_card.dart';
import '../providers/tester_dashboard_provider.dart';
import '../../../../models/test_session_model.dart';
import '../../../provider_dashboard/presentation/pages/provider_dashboard_page.dart';
import '../../../chat/presentation/pages/chat_list_page.dart';
import 'mission_detail_page.dart';

class TesterDashboardPage extends ConsumerStatefulWidget {
  final String testerId;

  const TesterDashboardPage({
    super.key,
    required this.testerId,
  });

  @override
  ConsumerState<TesterDashboardPage> createState() => _TesterDashboardPageState();
}

class _TesterDashboardPageState extends ConsumerState<TesterDashboardPage>
    with TickerProviderStateMixin {
  late TabController _tabController;
  late ScrollController _scrollController;
  bool _isAppBarExpanded = false;
  
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _scrollController = ScrollController();
    
    // TabController Ï¥àÍ∏∞Ìôî ÏôÑÎ£å
    
    // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(testerDashboardProvider.notifier).loadTesterData(widget.testerId);
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  void _toggleAppBar() {
    setState(() {
      _isAppBarExpanded = !_isAppBarExpanded;
    });
  }

  @override
  Widget build(BuildContext context) {
    final dashboardState = ref.watch(testerDashboardProvider);
    
    return Scaffold(
      body: CustomScrollView(
        controller: _scrollController,
        slivers: [
          // App Bar with Profile
          SliverAppBar(
            expandedHeight: _isAppBarExpanded ? 200.h : kToolbarHeight,
            collapsedHeight: kToolbarHeight,
            floating: false,
            pinned: true,
            elevation: 0,
            backgroundColor: Theme.of(context).colorScheme.primary,
            snap: false,
            automaticallyImplyLeading: false,
            leading: IconButton(
              icon: const Icon(Icons.swap_horiz, color: Colors.white),
              tooltip: 'Provider Î™®ÎìúÎ°ú Ï†ÑÌôò',
              onPressed: () {
                // Provider DashboardÎ°ú Ïù¥Îèô
                Navigator.of(context).pushReplacement(
                  MaterialPageRoute(
                    builder: (_) => const ProviderDashboardPage(
                      providerId: 'test_provider_001',
                    ),
                  ),
                );
              },
            ),
            flexibleSpace: _isAppBarExpanded ? FlexibleSpaceBar(
              background: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      Theme.of(context).colorScheme.primary,
                      Theme.of(context).colorScheme.primary.withValues(alpha: 0.8),
                    ],
                  ),
                ),
                child: SafeArea(
                  child: Padding(
                    padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 8.h),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        // Top spacing to avoid overlap with title
                        SizedBox(height: 60.h),
                        
                        // Greeting and notifications
                        Row(
                          children: [
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    'ÏïàÎÖïÌïòÏÑ∏Ïöî! üëã',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 16.sp,
                                    ),
                                  ),
                                  Text(
                                    'Ïò§ÎäòÎèÑ ÌôîÏù¥ÌåÖ!',
                                    style: TextStyle(
                                      color: Colors.white.withValues(alpha: 0.8),
                                      fontSize: 14.sp,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            // Notification and settings
                            IconButton(
                              onPressed: () => _showNotifications(context),
                              icon: Badge(
                                label: Text('${dashboardState.unreadNotifications}'),
                                isLabelVisible: dashboardState.unreadNotifications > 0,
                                child: const Icon(
                                  Icons.notifications,
                                  color: Colors.white,
                                ),
                              ),
                            ),
                            IconButton(
                              onPressed: () => _showProfileSettings(context),
                              icon: const Icon(
                                Icons.account_circle,
                                color: Colors.white,
                              ),
                            ),
                          ],
                        ),
                        
                        SizedBox(height: 16.h),
                        
                        // Quick stats
                        if (dashboardState.testerProfile != null)
                          _buildQuickStats(context, dashboardState.testerProfile!),
                      ],
                    ),
                  ),
                ),
              ),
            ) : null,
            title: GestureDetector(
              onTap: _toggleAppBar,
              child: Row(
                children: [
                  CircleAvatar(
                    radius: 16.w,
                    backgroundColor: Colors.white.withValues(alpha: 0.2),
                    child: Icon(
                      Icons.person,
                      color: Colors.white,
                      size: 18.w,
                    ),
                  ),
                  SizedBox(width: 8.w),
                  Expanded(
                    child: Text(
                      dashboardState.testerProfile?.name ?? 'ÌÖåÏä§ÌÑ∞',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 18.sp,
                        fontWeight: FontWeight.bold,
                      ),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  Icon(
                    _isAppBarExpanded ? Icons.keyboard_arrow_up : Icons.keyboard_arrow_down,
                    color: Colors.white,
                  ),
                ],
              ),
            ),
            actions: [
              // Hamburger menu
              PopupMenuButton<String>(
                icon: const Icon(Icons.menu, color: Colors.white),
                offset: Offset(0, 50.h),
                onSelected: (String value) {
                  switch (value) {
                    case 'provider':
                      _navigateToProviderDashboard(context);
                      break;
                    case 'settings':
                      _navigateToSettings(context);
                      break;
                  }
                },
                itemBuilder: (BuildContext context) => [
                  PopupMenuItem<String>(
                    value: 'provider',
                    child: Row(
                      children: [
                        Icon(Icons.business, color: Theme.of(context).colorScheme.primary),
                        SizedBox(width: 12.w),
                        const Text('Í≥µÍ∏âÏûê Í∏∞Îä•'),
                      ],
                    ),
                  ),
                  PopupMenuItem<String>(
                    value: 'settings',
                    child: Row(
                      children: [
                        Icon(Icons.settings, color: Theme.of(context).colorScheme.primary),
                        SizedBox(width: 12.w),
                        const Text('ÏÑ§Ï†ï'),
                      ],
                    ),
                  ),
                ],
              ),
            ],
          ),
          
          // Tab Bar
          SliverPersistentHeader(
            delegate: _SliverTabBarDelegate(
              TabBar(
                controller: _tabController,
                tabs: const [
                  Tab(text: 'ÎØ∏ÏÖò', icon: Icon(Icons.assignment)),
                  Tab(text: 'ÏàòÏùµ', icon: Icon(Icons.account_balance_wallet)),
                  Tab(text: 'Í≤åÏãúÌåê', icon: Icon(Icons.forum)),
                ],
                labelColor: Theme.of(context).colorScheme.primary,
                unselectedLabelColor: Colors.grey,
                indicatorColor: Theme.of(context).colorScheme.primary,
              ),
            ),
            pinned: true,
          ),
          
          // Tab Content
          SliverFillRemaining(
            child: dashboardState.isLoading
                ? const Center(child: CircularProgressIndicator())
                : dashboardState.error != null
                    ? _buildErrorWidget(dashboardState.error!)
                    : TabBarView(
                        controller: _tabController,
                        children: [
                          // ÎØ∏ÏÖò (ÎØ∏ÏÖò Ï∞æÍ∏∞ + ÏßÑÌñâ Ï§ëÏù∏ ÎØ∏ÏÖò ÌÜµÌï©)
                          _buildMissionTab(),
                          
                          // ÏàòÏùµ Í¥ÄÎ¶¨
                          EarningsSummaryWidget(testerId: widget.testerId),
                          
                          // Í≤åÏãúÌåê (Ïª§ÎÆ§ÎãàÌã∞)
                          CommunityBoardWidget(testerId: widget.testerId),
                        ],
                      ),
          ),
        ],
      ),
      
      // Floating Action Button for chat
      floatingActionButton: _buildChatFAB(),
      floatingActionButtonLocation: _CustomFabLocation(), // Î™®Îì† ÌÉ≠ÏóêÏÑú ÎèôÏùºÌïú Ï§ëÍ∞Ñ ÏúÑÏπòÎ°ú Í≥†Ï†ï
    );
  }

  Widget _buildQuickStats(BuildContext context, TesterProfile profile) {
    return Container(
      padding: EdgeInsets.all(12.w),
      decoration: BoxDecoration(
        color: Colors.white.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(12.r),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          _buildStatItem(
            'ÏôÑÎ£å ÎØ∏ÏÖò',
            '${profile.completedMissions}',
            Icons.check_circle,
          ),
          _buildStatDivider(),
          _buildStatItem(
            'ÏÑ±Í≥µÎ•†',
            '${(profile.successRate * 100).toStringAsFixed(0)}%',
            Icons.trending_up,
          ),
          _buildStatDivider(),
          _buildStatItem(
            'ÌèâÍ∑† ÌèâÏ†ê',
            '${profile.averageRating.toStringAsFixed(1)}',
            Icons.star,
          ),
          _buildStatDivider(),
          _buildStatItem(
            'Ïù¥Î≤à Îã¨',
            '${profile.monthlyPoints}P',
            Icons.calendar_today,
          ),
        ],
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: Colors.white, size: 20.w),
        SizedBox(height: 4.h),
        Text(
          value,
          style: TextStyle(
            color: Colors.white,
            fontSize: 16.sp,
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          label,
          style: TextStyle(
            color: Colors.white.withValues(alpha: 0.8),
            fontSize: 10.sp,
          ),
        ),
      ],
    );
  }

  Widget _buildStatDivider() {
    return Container(
      width: 1.w,
      height: 40.h,
      color: Colors.white.withValues(alpha: 0.3),
    );
  }

  Widget _buildErrorWidget(String error) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.error_outline,
            size: 48.w,
            color: Colors.red,
          ),
          SizedBox(height: 16.h),
          Text(
            'Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§',
            style: Theme.of(context).textTheme.titleMedium,
          ),
          SizedBox(height: 8.h),
          Text(
            error,
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
              color: Colors.grey,
            ),
            textAlign: TextAlign.center,
          ),
          SizedBox(height: 24.h),
          ElevatedButton.icon(
            onPressed: () {
              ref.read(testerDashboardProvider.notifier).loadTesterData(widget.testerId);
            },
            icon: const Icon(Icons.refresh),
            label: const Text('Îã§Ïãú ÏãúÎèÑ'),
          ),
        ],
      ),
    );
  }

  void _showNotifications(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        maxChildSize: 0.9,
        minChildSize: 0.3,
        builder: (context, scrollController) => Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20.r),
              topRight: Radius.circular(20.r),
            ),
          ),
          child: Column(
            children: [
              Container(
                padding: EdgeInsets.all(16.w),
                child: Row(
                  children: [
                    Icon(
                      Icons.notifications,
                      color: Theme.of(context).colorScheme.primary,
                    ),
                    SizedBox(width: 8.w),
                    Text(
                      'ÏïåÎ¶º',
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const Spacer(),
                    TextButton(
                      onPressed: () {
                        ref.read(testerDashboardProvider.notifier).markAllNotificationsRead();
                        Navigator.of(context).pop();
                      },
                      child: const Text('Î™®Îëê ÏùΩÏùå'),
                    ),
                  ],
                ),
              ),
              Expanded(
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.notifications_none, size: 48, color: Colors.grey),
                      SizedBox(height: 16),
                      Text('ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§', style: TextStyle(color: Colors.grey)),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildNotificationItem(String title, String message, DateTime time, bool isUnread) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 16.w, vertical: 4.h),
      decoration: BoxDecoration(
        color: isUnread ? Colors.green.shade50 : Colors.transparent,
        borderRadius: BorderRadius.circular(8.r),
      ),
      child: ListTile(
        leading: Container(
          width: 40.w,
          height: 40.w,
          decoration: BoxDecoration(
            color: isUnread 
                ? Theme.of(context).colorScheme.primary.withValues(alpha: 0.1)
                : Colors.grey.shade200,
            shape: BoxShape.circle,
          ),
          child: Icon(
            Icons.notification_important,
            color: isUnread ? Theme.of(context).colorScheme.primary : Colors.grey,
            size: 20.w,
          ),
        ),
        title: Text(
          title,
          style: TextStyle(
            fontWeight: isUnread ? FontWeight.bold : FontWeight.normal,
          ),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(message),
            SizedBox(height: 2.h),
            Text(
              _formatNotificationTime(time),
              style: TextStyle(
                fontSize: 10.sp,
                color: Colors.grey,
              ),
            ),
          ],
        ),
        trailing: isUnread 
            ? Container(
                width: 8.w,
                height: 8.w,
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.primary,
                  shape: BoxShape.circle,
                ),
              )
            : null,
      ),
    );
  }

  void _navigateToProviderDashboard(BuildContext context) {
    // Provider DashboardÎ°ú Ïù¥Îèô
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => ProviderDashboardPage(
          providerId: widget.testerId, // ÌÖåÏä§ÌÑ∞ IDÎ•º ÏûÑÏãúÎ°ú ÏÇ¨Ïö©
        ),
      ),
    );
  }

  void _navigateToSettings(BuildContext context) {
    // Settings ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('ÏÑ§Ï†ï ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌïòÎäî Í∏∞Îä•ÏùÑ Íµ¨ÌòÑ ÏòàÏ†ïÏûÖÎãàÎã§.'),
        duration: Duration(seconds: 2),
      ),
    );
  }

  void _showProfileSettings(BuildContext context) {
    // Navigate to profile settings page
  }

  // Chat FAB with unread message badge
  Widget _buildChatFAB() {
    final dashboardState = ref.watch(testerDashboardProvider);
    final int unreadCount = dashboardState.unreadNotifications;
    
    return Stack(
      children: [
        FloatingActionButton(
          heroTag: "tester_dashboard_chat_fab",
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const ChatListPage()),
            );
          },
          backgroundColor: Theme.of(context).colorScheme.primary,
          foregroundColor: Colors.white,
          child: const Icon(Icons.chat),
        ),
        if (unreadCount > 0)
          Positioned(
            right: 0,
            top: 0,
            child: Container(
              padding: EdgeInsets.all(4.w),
              decoration: BoxDecoration(
                color: Colors.red,
                shape: BoxShape.circle,
                border: Border.all(color: Colors.white, width: 2),
              ),
              constraints: BoxConstraints(
                minWidth: 20.w,
                minHeight: 20.w,
              ),
              child: Text(
                unreadCount > 99 ? '99+' : '$unreadCount',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 10.sp,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
            ),
          ),
      ],
    );
  }

  String _formatNotificationTime(DateTime time) {
    final now = DateTime.now();
    final difference = now.difference(time);
    
    if (difference.inDays > 0) {
      return '${difference.inDays}Ïùº Ï†Ñ';
    } else if (difference.inHours > 0) {
      return '${difference.inHours}ÏãúÍ∞Ñ Ï†Ñ';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes}Î∂Ñ Ï†Ñ';
    } else {
      return 'Î∞©Í∏à Ï†Ñ';
    }
  }

  Widget _buildMissionTab() {
    return DefaultTabController(
      length: 3,
      child: Column(
        children: [
          Expanded(
            child: Container(
              color: Colors.grey.shade50, // Î≥∏Î¨∏ Î∞∞Í≤ΩÏÉâÏùÑ Ïó∞Ìïú ÌöåÏÉâÏúºÎ°ú
              child: TabBarView(
                children: [
                  // ÎØ∏ÏÖò Ï∞æÍ∏∞ Í∞ÑÎã® Î≤ÑÏ†Ñ
                  _buildMissionDiscoveryTab(),
                  // ÏßÑÌñâ Ï§ëÏù∏ ÎØ∏ÏÖò Í∞ÑÎã® Î≤ÑÏ†Ñ  
                  _buildActiveMissionsTab(),
                  // ÏôÑÎ£åÎêú ÎØ∏ÏÖò ÌÉ≠
                  _buildCompletedMissionsTab(),
                ],
              ),
            ),
          ),
          Container(
            height: 60.h + MediaQuery.of(context).padding.bottom, // ÏãúÏä§ÌÖú ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò Î∞î ÎÜíÏù¥ Ï∂îÍ∞Ä
            decoration: BoxDecoration(
              color: Colors.green.shade50, // Ïó∞Ìïú ÎÖπÏÉâ Î∞∞Í≤Ω
              border: Border(
                top: BorderSide(
                  color: Colors.grey.shade200,
                  width: 1,
                ),
              ),
            ),
            child: Padding(
              padding: EdgeInsets.only(bottom: MediaQuery.of(context).padding.bottom), // ÌïòÎã® ÏÑ∏Ïù¥ÌîÑ ÏóêÎ¶¨Ïñ¥ Ìå®Îî©
              child: TabBar(
                labelColor: Colors.green.shade700,
                unselectedLabelColor: Colors.grey.shade600,
                indicatorColor: Colors.green.shade700,
                indicatorWeight: 3,
                labelStyle: TextStyle(
                  fontSize: 13.sp, // Ìè∞Ìä∏ ÌÅ¨Í∏∞ Ï°∞Ï†ï
                  fontWeight: FontWeight.w600,
                ),
                unselectedLabelStyle: TextStyle(
                  fontSize: 13.sp,
                  fontWeight: FontWeight.normal,
                ),
                tabs: [
                  Tab(text: 'ÎØ∏ÏÖò Ï∞æÍ∏∞', icon: Icon(Icons.search, size: 18.w)),
                  Tab(text: 'ÏßÑÌñâ Ï§ë', icon: Icon(Icons.play_circle, size: 18.w)),
                  Tab(text: 'ÏôÑÎ£å', icon: Icon(Icons.check_circle, size: 18.w)),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMissionDiscoveryTab() {
    final dashboardState = ref.watch(testerDashboardProvider);
    
    if (dashboardState.availableMissions.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.search_off, size: 64.w, color: Colors.grey[400]),
            SizedBox(height: 16.h),
            Text(
              'ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÎØ∏ÏÖòÏù¥ ÏóÜÏäµÎãàÎã§',
              style: TextStyle(
                fontSize: 18.sp,
                fontWeight: FontWeight.w600,
                color: Colors.grey[600],
              ),
            ),
            SizedBox(height: 8.h),
            Text(
              'ÏÉàÎ°úÏö¥ ÎØ∏ÏÖòÏù¥ Îì±Î°ùÎêòÎ©¥ ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî!',
              style: TextStyle(
                fontSize: 14.sp,
                color: Colors.grey[500],
              ),
            ),
          ],
        ),
      );
    }
    
    return ListView.builder(
      padding: EdgeInsets.all(16.w),
      itemCount: dashboardState.availableMissions.length,
      itemBuilder: (context, index) {
        final mission = dashboardState.availableMissions[index];
        return Padding(
          padding: EdgeInsets.only(bottom: 12.h),
          child: ExpandableMissionCard(
            mission: mission,
            testerId: widget.testerId,
          ),
        );
      },
    );
  }

  Widget _buildActiveMissionsTab() {
    final dashboardState = ref.watch(testerDashboardProvider);
    
    if (dashboardState.activeMissions.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.play_circle_outline, size: 64.w, color: Colors.grey[400]),
            SizedBox(height: 16.h),
            Text(
              'ÏßÑÌñâ Ï§ëÏù∏ ÎØ∏ÏÖòÏù¥ ÏóÜÏäµÎãàÎã§',
              style: TextStyle(
                fontSize: 18.sp,
                fontWeight: FontWeight.w600,
                color: Colors.grey[600],
              ),
            ),
            SizedBox(height: 8.h),
            Text(
              'ÎØ∏ÏÖòÏùÑ Ïã†Ï≤≠ÌïòÍ≥† ÌÖåÏä§Ìä∏Î•º ÏãúÏûëÌïòÏÑ∏Ïöî!',
              style: TextStyle(
                fontSize: 14.sp,
                color: Colors.grey[500],
              ),
            ),
          ],
        ),
      );
    }
    
    return ListView.builder(
      padding: EdgeInsets.all(16.w),
      itemCount: dashboardState.activeMissions.length,
      itemBuilder: (context, index) {
        final mission = dashboardState.activeMissions[index];
        // Create a mock test session from mission data for now
        final progressCount = ((mission.progress ?? 0.0) * 14).round();
        final dailyProgressList = List.generate(14, (index) {
          return DailyTestProgress(
            day: index + 1,
            scheduledDate: DateTime.now().add(Duration(days: index - 1)),
            status: index < progressCount ? DailyTestStatus.approved : DailyTestStatus.pending,
            submittedAt: index < progressCount ? DateTime.now().subtract(Duration(days: 14 - index)) : null,
            approvedAt: index < progressCount ? DateTime.now().subtract(Duration(days: 14 - index)) : null,
          );
        });

        final testSession = TestSession(
          id: 'session_${mission.id}',
          missionId: mission.id,
          testerId: widget.testerId,
          providerId: mission.providerId ?? 'unknown',
          appId: mission.appName,
          status: TestSessionStatus.approved,
          totalRewardPoints: mission.rewardPoints,
          startedAt: mission.startedAt ?? DateTime.now().subtract(const Duration(days: 1)),
          createdAt: mission.startedAt ?? DateTime.now().subtract(const Duration(days: 1)),
          dailyProgress: dailyProgressList,
        );
        return Padding(
          padding: EdgeInsets.only(bottom: 12.h),
          child: ActiveTestSessionCard(session: testSession),
        );
      },
    );
  }

  Widget _buildMissionCard({
    required String title,
    required String description,
    required String reward,
    required String deadline,
    required String participants,
  }) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12.r),
      ),
      child: InkWell(
        onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('$title ÎØ∏ÏÖò ÏÉÅÏÑ∏Î≥¥Í∏∞')),
          );
        },
        borderRadius: BorderRadius.circular(12.r),
        child: Padding(
          padding: EdgeInsets.all(16.w),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Text(
                      title,
                      style: TextStyle(
                        fontSize: 16.sp,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8.w, vertical: 4.h),
                    decoration: BoxDecoration(
                      color: Colors.green.shade100,
                      borderRadius: BorderRadius.circular(12.r),
                    ),
                    child: Text(
                      reward,
                      style: TextStyle(
                        color: Colors.green.shade700,
                        fontWeight: FontWeight.bold,
                        fontSize: 12.sp,
                      ),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 8.h),
              Text(
                description,
                style: TextStyle(
                  fontSize: 14.sp,
                  color: Colors.grey[600],
                ),
              ),
              SizedBox(height: 12.h),
              Row(
                children: [
                  Icon(Icons.access_time, size: 16.w, color: Colors.grey[600]),
                  SizedBox(width: 4.w),
                  Flexible(
                    child: Text(
                      deadline,
                      style: TextStyle(fontSize: 12.sp, color: Colors.grey[600]),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  SizedBox(width: 16.w),
                  Icon(Icons.people, size: 16.w, color: Colors.grey[600]),
                  SizedBox(width: 4.w),
                  Flexible(
                    child: Text(
                      participants,
                      style: TextStyle(fontSize: 12.sp, color: Colors.grey[600]),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildActiveMissionCard({
    required String title,
    required double progress,
    required String status,
    required String deadline,
  }) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12.r),
      ),
      child: InkWell(
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => MissionDetailPage(
                missionId: 'mission_${title.hashCode}',
                missionTitle: title,
                missionDescription: 'Ïï± ÌÖåÏä§Ìä∏Î•º ÌÜµÌï¥ ÌíàÏßàÏùÑ Í≤ÄÏ¶ùÌïòÍ≥† Í∞úÏÑ†Ï†êÏùÑ Ï∞æÏïÑÏ£ºÏÑ∏Ïöî.',
                appName: title.contains('Ï±ÑÌåÖ') ? 'Ï±ÑÌåÖÎ©îÏã†Ï†Ä Ïï±' : 'Î™®Î∞îÏùº Í≤åÏûÑ Ïï±',
              ),
            ),
          );
        },
        borderRadius: BorderRadius.circular(12.r),
        child: Padding(
          padding: EdgeInsets.all(16.w),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Text(
                      title,
                      style: TextStyle(
                        fontSize: 16.sp,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8.w, vertical: 4.h),
                    decoration: BoxDecoration(
                      color: Colors.orange.shade100,
                      borderRadius: BorderRadius.circular(12.r),
                    ),
                    child: Text(
                      status,
                      style: TextStyle(
                        color: Colors.orange.shade700,
                        fontWeight: FontWeight.bold,
                        fontSize: 12.sp,
                      ),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 12.h),
              Row(
                children: [
                  Expanded(
                    child: LinearProgressIndicator(
                      value: progress,
                      backgroundColor: Colors.grey[300],
                      valueColor: AlwaysStoppedAnimation<Color>(
                        Theme.of(context).colorScheme.primary,
                      ),
                    ),
                  ),
                  SizedBox(width: 8.w),
                  Text(
                    '${(progress * 100).toInt()}%',
                    style: TextStyle(
                      fontSize: 12.sp,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              SizedBox(height: 8.h),
              Row(
                children: [
                  Icon(Icons.access_time, size: 16.w, color: Colors.grey[600]),
                  SizedBox(width: 4.w),
                  Text(
                    deadline,
                    style: TextStyle(fontSize: 12.sp, color: Colors.grey[600]),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildCompletedMissionsTab() {
    final dashboardState = ref.watch(testerDashboardProvider);
    
    if (dashboardState.completedMissions.isEmpty) {
      return _buildEmptyCompletedMissions();
    }

    return ListView.builder(
      padding: EdgeInsets.all(16.w),
      itemCount: dashboardState.completedMissions.length,
      itemBuilder: (context, index) {
        final mission = dashboardState.completedMissions[index];
        // Convert MissionCard to CompletedMission for display
        final completedMission = CompletedMission(
          id: mission.id,
          title: mission.title,
          description: mission.description,
          points: mission.rewardPoints,
          rating: 4.5, // Default rating
          completedDate: DateTime.now().toString().substring(0, 10),
          settlementStatus: SettlementStatus.settled,
        );
        return _buildCompletedMissionCard(completedMission);
      },
    );
  }

  Widget _buildEmptyCompletedMissions() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.check_circle_outline,
            size: 64.w,
            color: Colors.grey[400],
          ),
          SizedBox(height: 16.h),
          Text(
            'ÏôÑÎ£åÎêú ÎØ∏ÏÖòÏù¥ ÏóÜÏäµÎãàÎã§',
            style: TextStyle(
              fontSize: 18.sp,
              fontWeight: FontWeight.w600,
              color: Colors.grey[600],
            ),
          ),
          SizedBox(height: 8.h),
          Text(
            'ÎØ∏ÏÖòÏùÑ ÏôÑÎ£åÌïòÍ≥† Ìè¨Ïù∏Ìä∏Î•º ÌöçÎìùÌïòÏÑ∏Ïöî!',
            style: TextStyle(
              fontSize: 14.sp,
              color: Colors.grey[500],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCompletedMissionCard(CompletedMission mission) {
    return Card(
      margin: EdgeInsets.only(bottom: 12.h),
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12.r),
      ),
      child: Padding(
        padding: EdgeInsets.all(16.w),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 8.w, vertical: 4.h),
                  decoration: BoxDecoration(
                    color: _getSettlementStatusColor(mission.settlementStatus),
                    borderRadius: BorderRadius.circular(12.r),
                  ),
                  child: Text(
                    _getSettlementStatusText(mission.settlementStatus),
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 10.sp,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                const Spacer(),
                Text(
                  mission.completedDate,
                  style: TextStyle(
                    fontSize: 11.sp,
                    color: Colors.grey[500],
                  ),
                ),
              ],
            ),
            SizedBox(height: 12.h),
            Text(
              mission.title,
              style: TextStyle(
                fontSize: 16.sp,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 4.h),
            Text(
              mission.description,
              style: TextStyle(
                fontSize: 13.sp,
                color: Colors.grey[600],
              ),
            ),
            SizedBox(height: 12.h),
            Row(
              children: [
                Icon(
                  Icons.monetization_on,
                  size: 16.w,
                  color: Colors.amber,
                ),
                SizedBox(width: 4.w),
                Text(
                  '${mission.points}P',
                  style: TextStyle(
                    fontSize: 14.sp,
                    fontWeight: FontWeight.bold,
                    color: Colors.amber[700],
                  ),
                ),
                SizedBox(width: 16.w),
                Icon(
                  Icons.star,
                  size: 16.w,
                  color: Colors.orange,
                ),
                SizedBox(width: 4.w),
                Text(
                  '${mission.rating}/5.0',
                  style: TextStyle(
                    fontSize: 13.sp,
                    color: Colors.grey[600],
                  ),
                ),
                const Spacer(),
                if (mission.settlementStatus == SettlementStatus.pending)
                  ElevatedButton(
                    onPressed: () => _showSettlementInfo(mission),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      minimumSize: Size(80.w, 32.h),
                    ),
                    child: Text(
                      'Ï†ïÏÇ∞ ÎåÄÍ∏∞',
                      style: TextStyle(
                        fontSize: 11.sp,
                        color: Colors.white,
                      ),
                    ),
                  ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  // Removed hardcoded dummy data - using real data from provider

  Color _getSettlementStatusColor(SettlementStatus status) {
    switch (status) {
      case SettlementStatus.pending:
        return Colors.orange;
      case SettlementStatus.processing:
        return Colors.green;
      case SettlementStatus.settled:
        return Colors.green;
    }
  }

  String _getSettlementStatusText(SettlementStatus status) {
    switch (status) {
      case SettlementStatus.pending:
        return 'Ï†ïÏÇ∞ ÎåÄÍ∏∞';
      case SettlementStatus.processing:
        return 'Ï†ïÏÇ∞ Ï≤òÎ¶¨Ï§ë';
      case SettlementStatus.settled:
        return 'Ï†ïÏÇ∞ ÏôÑÎ£å';
    }
  }

  void _showSettlementInfo(CompletedMission mission) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(
          'Ï†ïÏÇ∞ Ï†ïÎ≥¥',
          style: TextStyle(
            fontSize: 18.sp,
            fontWeight: FontWeight.bold,
          ),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('ÎØ∏ÏÖò: ${mission.title}'),
            SizedBox(height: 8.h),
            Text('ÌöçÎìù Ìè¨Ïù∏Ìä∏: ${mission.points}P'),
            SizedBox(height: 8.h),
            Text('ÌèâÍ∞Ä Ï†êÏàò: ${mission.rating}/5.0'),
            SizedBox(height: 8.h),
            Text('ÏôÑÎ£åÏùº: ${mission.completedDate}'),
            SizedBox(height: 12.h),
            Container(
              padding: EdgeInsets.all(12.w),
              decoration: BoxDecoration(
                color: Colors.orange[50],
                borderRadius: BorderRadius.circular(8.r),
                border: Border.all(color: Colors.orange[200]!),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.info, color: Colors.orange, size: 16.w),
                      SizedBox(width: 8.w),
                      Text(
                        'Ï†ïÏÇ∞ ÎåÄÍ∏∞ Ï§ë',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.orange[800],
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 8.h),
                  Text(
                    'Í≥µÍ∏âÏûêÍ∞Ä Ìè¨Ïù∏Ìä∏ Ï†ïÏÇ∞ÏùÑ ÏôÑÎ£åÌïòÎ©¥ ÏûêÎèôÏúºÎ°ú ÏÇ¨ÎùºÏßëÎãàÎã§.',
                    style: TextStyle(
                      fontSize: 13.sp,
                      color: Colors.orange[700],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }
}

enum SettlementStatus {
  pending,    // Ï†ïÏÇ∞ ÎåÄÍ∏∞
  processing, // Ï†ïÏÇ∞ Ï≤òÎ¶¨Ï§ë  
  settled,    // Ï†ïÏÇ∞ ÏôÑÎ£å
}

class CompletedMission {
  final String id;
  final String title;
  final String description;
  final int points;
  final double rating;
  final String completedDate;
  final SettlementStatus settlementStatus;

  CompletedMission({
    required this.id,
    required this.title,
    required this.description,
    required this.points,
    required this.rating,
    required this.completedDate,
    required this.settlementStatus,
  });
}

// Custom SliverPersistentHeaderDelegate for TabBar
class _SliverTabBarDelegate extends SliverPersistentHeaderDelegate {
  final TabBar _tabBar;

  _SliverTabBarDelegate(this._tabBar);

  @override
  double get minExtent => _tabBar.preferredSize.height;

  @override
  double get maxExtent => _tabBar.preferredSize.height;

  @override
  Widget build(BuildContext context, double shrinkOffset, bool overlapsContent) {
    return Container(
      color: Colors.white,
      child: _tabBar,
    );
  }

  @override
  bool shouldRebuild(_SliverTabBarDelegate oldDelegate) {
    return false;
  }
}

// Custom FAB Location to avoid overlap with bottom tabs
class _CustomFabLocation extends FloatingActionButtonLocation {
  @override
  Offset getOffset(ScaffoldPrelayoutGeometry scaffoldGeometry) {
    // Í∏∞Î≥∏ endFloat ÏúÑÏπòÎ•º Í∏∞Ï§ÄÏúºÎ°ú Y Ï¢åÌëúÎßå Ï°∞Ï†ï
    final double x = scaffoldGeometry.scaffoldSize.width - 
                     scaffoldGeometry.floatingActionButtonSize.width - 16.0;
    final double y = scaffoldGeometry.scaffoldSize.height - 
                     scaffoldGeometry.floatingActionButtonSize.height - 
                     120.0; // ÌïòÎã® ÌÉ≠Î∞îÏôÄ Í∏∞Î≥∏ ÏúÑÏπòÏùò Ï§ëÍ∞Ñ ÏßÄÏ†êÏúºÎ°ú Í≥†Ï†ï
    
    return Offset(x, y);
  }
}