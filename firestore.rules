rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function hasRole(role) {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == role;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isSignedIn() && isOwner(userId) && 
                       request.resource.data.keys().hasAll(['email', 'displayName', 'userType', 'createdAt']);
      allow update: if isSignedIn() && isOwner(userId) && 
                       !('userType' in resource.data.diff(request.resource.data).changedKeys());
      allow delete: if false; // Users cannot be deleted, only deactivated
    }
    
    // Providers collection
    match /providers/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow write: if isSignedIn() && isOwner(userId) && hasRole('provider');
    }
    
    // Testers collection
    match /testers/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow write: if isSignedIn() && isOwner(userId) && hasRole('tester');
    }
    
    // Missions collection
    match /missions/{missionId} {
      allow read: if isSignedIn(); // All authenticated users can read missions
      allow create: if isSignedIn() && hasRole('provider') && 
                       isOwner(request.resource.data.providerId);
      allow update: if isSignedIn() && (
                       (hasRole('provider') && isOwner(resource.data.providerId)) ||
                       isAdmin()
                    );
      allow delete: if isSignedIn() && (
                       (hasRole('provider') && isOwner(resource.data.providerId)) ||
                       isAdmin()
                    );
    }
    
    // Apps collection
    match /apps/{appId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && hasRole('provider') && 
                      isOwner(request.resource.data.providerId);
    }
    
    // Mission Applications collection
    match /mission_applications/{applicationId} {
      allow read: if isSignedIn() && (
                     isOwner(resource.data.testerId) || 
                     isOwner(resource.data.providerId) ||
                     isAdmin()
                  );
      allow create: if isSignedIn() && hasRole('tester') && 
                       isOwner(request.resource.data.testerId);
      allow update: if isSignedIn() && (
                       (hasRole('tester') && isOwner(resource.data.testerId)) ||
                       (hasRole('provider') && isOwner(resource.data.providerId)) ||
                       isAdmin()
                    );
      allow delete: if false; // Applications cannot be deleted
    }
    
    // Bug Reports collection
    match /bug_reports/{reportId} {
      allow read: if isSignedIn() && (
                     isOwner(resource.data.testerId) || 
                     isOwner(resource.data.providerId) ||
                     isAdmin()
                  );
      allow create: if isSignedIn() && hasRole('tester') && 
                       isOwner(request.resource.data.testerId);
      allow update: if isSignedIn() && (
                       (hasRole('tester') && isOwner(resource.data.testerId)) ||
                       (hasRole('provider') && isOwner(resource.data.providerId)) ||
                       isAdmin()
                    );
      allow delete: if false; // Bug reports cannot be deleted
    }
    
    // Payments collection
    match /payments/{paymentId} {
      allow read: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
      allow write: if isAdmin(); // Only admins can create/update payments
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId) && 
                       request.resource.data.diff(resource.data).changedKeys().hasOnly(['status']);
      allow create, delete: if isAdmin();
    }
    
    // Analytics Events collection
    match /analytics_events/{eventId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin();
    }
    
    // Admin collection (for role checking)
    match /admins/{userId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow write: if false; // Admins can only be managed server-side
    }
  }
}
